#include <jsoncpp/json/json.h>
#include <iostream>
#include "error_no.h"
#include "intreadwrite.h"
#include "variables.h"
#include "util.h"
#include "KafkaProducer.h"
using namespace std;
std::string JsonAsString(const Json::Value &json)
{
  std::string result;
  Json::StreamWriterBuilder wbuilder;
  wbuilder["indentation"] = ""; // Optional
  result = Json::writeString(wbuilder, json);
  return result;
}

int main()
{
  init_logger();
  KafkaProducer producer(local_brokers, "mandrel");
  Json::Value root;
  Json::Value schema;
  Json::Value payload;
  Json::Value data1; 
  uint8_t *data;
  data=(uint8_t *)malloc(4*sizeof(uint8_t)); 
  uint8_t *digital;
  digital=(uint8_t *)malloc(4*sizeof(uint8_t));                                                                                            
  schema["type"] = "struct";
  data1["field"] = "DeviceID";
  data1["type"] = "int32";
  Json::Value data2;
  data2["field"] = "WellID";
  data2["type"] = "int32";
   Json::Value data3;
  data3["field"] = "Layer";
  data3["type"] = "int32";
   Json::Value data4;
  data4["field"] = "Traffic";
  data4["type"] = "float";
   Json::Value data5;
  data5["field"] = "Temperature";
  data5["type"] = "int32";
   Json::Value data6;
  data6["field"] = "InternalPressure";
  data6["type"] = "int32";
   Json::Value data7;
  data7["field"] = "ExternalPressure";
  data7["type"] = "int32";
  Json::Value data8;
  data8["field"] = "OpeningAccuracy";
  data8["type"] = "int32";
  Json::Value data9;
  data9["field"] = "MoisturePercentage";
  data9["type"] = "int32";
  Json::Value data10;
  data10["field"] = "Status";
  data10["type"] = "int32";
   Json::Value data11;
  data11["field"] = "MotorStatus";
  data11["type"] = "int32";
   Json::Value data12;
  data12["field"] = "MotorCurrent";
  data12["type"] = "int32";
   Json::Value data13;
  data13["field"] = "Voltage";
  data13["type"] = "int32";
   Json::Value data14;
  data14["field"] = "Current";
  data14["type"] = "int32";
   Json::Value data15;
  data15["field"] = "OperatingMode";
  data15["type"] = "int32";
  Json::Value data16;
  data16["field"] = "ControlStatus";
  data16["type"] = "int32";
  Json::Value data17;
  data17["field"] = "YieldControl";
  data17["type"] = "int32";
  Json::Value data18;
  data18["field"] = "YieldValue";
  data18["type"] = "float";
  Json::Value data19;
  data19["field"] = "UpFlowDeviation";
  data19["type"] = "int32";
  Json::Value data20;
  data20["field"] = "DownFlowDeviation";
  data20["type"] = "int32";
  Json::Value data21;
  data21["field"] = "AdjustmentMinutes";
  data21["type"] = "int32";
   Json::Value data22;
  data22["field"] = "PressureTestControl";
  data22["type"] = "int32";
  Json::Value data23;
  data23["field"] = "PressureTestHour";
  data23["type"] = "int32";
  Json::Value data24;
  data24["field"] = "WaterAbsorptionTest";
  data24["type"] = "int32";
  Json::Value data25;
  data25["field"] = "FaucetFlag";
  data25["type"] = "int32";
  schema["fields"].append(data1);
  schema["fields"].append(data2);
  schema["fields"].append(data3);
  schema["fields"].append(data4);
  schema["fields"].append(data5);
  schema["fields"].append(data6);
  schema["fields"].append(data7);
  schema["fields"].append(data8);
  schema["fields"].append(data9);
  schema["fields"].append(data10);
  schema["fields"].append(data11);
  schema["fields"].append(data12);
  schema["fields"].append(data13);
  schema["fields"].append(data14);
  schema["fields"].append(data15);
  schema["fields"].append(data16);
  schema["fields"].append(data17);
  schema["fields"].append(data18);
  schema["fields"].append(data19);
  schema["fields"].append(data20);
  schema["fields"].append(data21);
  schema["fields"].append(data22);
  schema["fields"].append(data23);
  schema["fields"].append(data24);
  schema["fields"].append(data25);
  root["schema"] = schema;
  uint8_t buffer[59] = {0x03, 0x3B, 0x00, 0x00, 0x00, 0x03, 0x00, 0x53, 0x04, 0x00, 0x01, 0x00, 0x00, 0x41, 0xBC, 0x00, 0xAF, 0x0B, 0xBB, 0x0D, 0xAC, 0x0F, 0xA0, 0x0F, 0xA0, 0x00, 0x01, 0x00, 0x01, 0x02, 0x26, 0x03, 0xE8, 0x04, 0xE2, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,0x41, 0xBC, 0x00, 0x32, 0x00, 0x19, 0x00, 0x22, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02};
  payload["DeviceID"] = AV_RL16(buffer + 7);
   payload["WellID"] = 999;
  // string s(buffer + 11,buffer + 11 + 20);
   payload["Layer"] =  AV_RB16(buffer + 9);
    data[0] = buffer[12];
    data[1] = buffer[11];
    data[2] =  buffer[14];
    data[3] = buffer[13];
   payload["Traffic"] = *(float*)(data);
   payload["Temperature"] = AV_RB16(buffer + 15);
   payload["InternalPressure"] = AV_RB16(buffer + 17);
   payload["ExternalPressure"] = AV_RB16(buffer + 19);
   payload["OpeningAccuracy"] =AV_RB16(buffer + 21);
   payload["MoisturePercentage"] = AV_RB16(buffer + 23);
   payload["Status"] = AV_RB16(buffer + 25);
   payload["MotorStatus"] = AV_RB16(buffer + 27);
   payload["MotorCurrent"] = AV_RB16(buffer + 29);
   payload["Voltage"] = AV_RB16(buffer + 31);
   payload["Current"] = AV_RB16(buffer + 33);
   payload["OperatingMode"] = AV_RB16(buffer + 35);
   payload["ControlStatus"] = AV_RB16(buffer + 37);
   payload["YieldControl"] =AV_RB16(buffer + 39);
    digital[0] = buffer[42];
  digital[1] = buffer[41];
  digital[2] =  buffer[44];
  digital[3] = buffer[43];
   payload["YieldValue"] = *(float*)digital;
   payload["UpFlowDeviation"] = AV_RB16(buffer + 45);
   payload["DownFlowDeviation"] = AV_RB16(buffer + 47);
   payload["AdjustmentMinutes"] = AV_RB16(buffer + 49);
   payload["PressureTestControl"] = AV_RB16(buffer + 51);
   payload["PressureTestHour"] = AV_RB16(buffer + 53);
   payload["WaterAbsorptionTest"] = AV_RB16(buffer + 55);
   payload["FaucetFlag"] = AV_RB16(buffer + 57);
   root["payload"] = payload;
 // cout << "id:" << root["id"].asInt() << endl;
  string str = JsonAsString(root);
  producer.pushMessage(str);
  cout<<str<<endl;
   free(data);
    free(digital);
  return 0;
}